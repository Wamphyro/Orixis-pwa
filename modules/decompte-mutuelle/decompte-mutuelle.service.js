// ========================================
// DECOMPTE-MUTUELLE.SERVICE.JS - üéØ SERVICE M√âTIER PRINCIPAL
// 
// R√îLE : Logique business et workflow des d√©comptes
// - Gestion des statuts et transitions
// - Calcul des statistiques
// - Orchestration des op√©rations m√©tier
// ========================================

// ========================================
// DECOMPTE-MUTUELLE.SERVICE.JS - Gestion des d√©comptes Firebase
// Chemin: modules/decompte-mutuelle/decompte-mutuelle.service.js
//
// DESCRIPTION:
// Service de gestion des d√©comptes mutuelles avec Firebase
// CRUD basique pour l'instant (Create, Read, Update, Delete)
//
// STRUCTURE:
// 1. Imports et configuration
// 2. M√©thodes de lecture (getDecomptes, getDecompte)
// 3. M√©thodes de statistiques
// 4. M√©thodes de changement de statut
// 5. Helpers priv√©s
//
// D√âPENDANCES:
// - Firebase Firestore
// - decompte-mutuelle.data.js (constantes m√©tier)
// ========================================

import { db } from '../../src/services/firebase.service.js';
import { 
    DECOMPTES_CONFIG, 
    genererNumeroDecompte,
    genererVirementId,
    getProchainStatut
} from './decompte-mutuelle.data.js';

/**
 * Service de gestion des d√©comptes mutuelles
 */
export class DecomptesMutuellesService {
    
    /**
     * R√©cup√©rer les d√©comptes selon des crit√®res
     * @param {Object} criteres - Crit√®res de recherche
     * @returns {Promise<Array>} Liste des d√©comptes
     */
    static async getDecomptes(criteres = {}) {
        try {
            const { collection, getDocs, query, where, orderBy, limit } = 
                await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            let constraints = [];
            
            // Filtrer par statut
            if (criteres.statut) {
                constraints.push(where('statut', '==', criteres.statut));
            }
            
            // Filtrer par mutuelle
            if (criteres.mutuelle) {
                constraints.push(where('mutuelle', '==', criteres.mutuelle));
            }
            
            // Filtrer par magasin
            if (criteres.magasin) {
                constraints.push(where('codeMagasin', '==', criteres.magasin));
            }
            
            // Filtrer par type de d√©compte
            if (criteres.typeDecompte) {
                constraints.push(where('typeDecompte', '==', criteres.typeDecompte));
            }
            
            // Tri par date de virement d√©croissant
            constraints.push(orderBy('dateVirement', 'desc'));
            
            // Limite si sp√©cifi√©e
            if (criteres.limite) {
                constraints.push(limit(criteres.limite));
            }
            
            const q = query(collection(db, 'decomptes_mutuelles'), ...constraints);
            const snapshot = await getDocs(q);
            
            const decomptes = [];
            snapshot.forEach((doc) => {
                decomptes.push({ id: doc.id, ...doc.data() });
            });
            
            return decomptes;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration d√©comptes:', error);
            return [];
        }
    }
    
    /**
     * R√©cup√©rer un d√©compte par son ID
     * @param {string} decompteId - ID du d√©compte
     * @returns {Promise<Object>} Donn√©es du d√©compte
     */
    static async getDecompte(decompteId) {
        try {
            const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            const decompteDoc = await getDoc(doc(db, 'decomptes_mutuelles', decompteId));
            
            if (decompteDoc.exists()) {
                return { id: decompteDoc.id, ...decompteDoc.data() };
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration d√©compte:', error);
            return null;
        }
    }
    
    /**
     * Rechercher des d√©comptes
     * @param {string} recherche - Terme de recherche
     * @returns {Promise<Array>} D√©comptes trouv√©s
     */
    static async rechercherDecomptes(recherche) {
        try {
            if (!recherche || recherche.length < 2) {
                return await this.getDecomptes({ limite: 50 });
            }
            
            // R√©cup√©rer tous les d√©comptes r√©cents
            const decomptes = await this.getDecomptes({ limite: 200 });
            
            const termeRecherche = recherche.toLowerCase();
            
            // Filtrer localement
            return decomptes.filter(decompte => {
                const clientNom = `${decompte.client.prenom} ${decompte.client.nom}`.toLowerCase();
                const numeroDecompte = decompte.numeroDecompte?.toLowerCase() || '';
                const virementId = decompte.virementId?.toLowerCase() || '';
                const mutuelle = decompte.mutuelle?.toLowerCase() || '';
                const nss = decompte.client.numeroSecuriteSociale?.replace(/\s/g, '') || '';
                
                return clientNom.includes(termeRecherche) ||
                       numeroDecompte.includes(termeRecherche) ||
                       virementId.includes(termeRecherche) ||
                       mutuelle.includes(termeRecherche) ||
                       nss.includes(termeRecherche.replace(/\s/g, ''));
            });
            
        } catch (error) {
            console.error('‚ùå Erreur recherche d√©comptes:', error);
            return [];
        }
    }
    
    /**
     * Obtenir les statistiques des d√©comptes
     * @returns {Promise<Object>} Statistiques
     */
    static async getStatistiques() {
        try {
            const decomptes = await this.getDecomptes({ limite: 1000 });
            
            const stats = {
                total: decomptes.length,
                parStatut: {},
                parMutuelle: {},
                montantTotal: 0,
                montantMoyen: 0
            };
            
            // Calculer les statistiques
            decomptes.forEach(decompte => {
                // Exclure les d√©comptes supprim√©s des stats
                if (decompte.statut === 'supprime') {
                    return;
                }
                
                // Par statut
                stats.parStatut[decompte.statut] = (stats.parStatut[decompte.statut] || 0) + 1;
                
                // Par mutuelle
                stats.parMutuelle[decompte.mutuelle] = (stats.parMutuelle[decompte.mutuelle] || 0) + 1;
                
                // Montants
                stats.montantTotal += decompte.montantVirement || 0;
            });
            
            // Montant moyen
            const decomptesNonSupprimes = decomptes.filter(d => d.statut !== 'supprime').length;
            stats.montantMoyen = decomptesNonSupprimes > 0 ? 
                stats.montantTotal / decomptesNonSupprimes : 0;
            
            return stats;
            
        } catch (error) {
            console.error('‚ùå Erreur calcul statistiques:', error);
            return {
                total: 0,
                parStatut: {},
                parMutuelle: {},
                montantTotal: 0,
                montantMoyen: 0
            };
        }
    }
    
    /**
     * Changer le statut d'un d√©compte
     * @param {string} decompteId - ID du d√©compte
     * @param {string} nouveauStatut - Nouveau statut
     * @param {Object} donnees - Donn√©es additionnelles
     * @returns {Promise<boolean>} Succ√®s du changement
     */
    static async changerStatut(decompteId, nouveauStatut, donnees = {}) {
        try {
            const { doc, updateDoc, serverTimestamp, arrayUnion } = 
                await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            // R√©cup√©rer le d√©compte actuel
            const decompte = await this.getDecompte(decompteId);
            if (!decompte) {
                throw new Error('D√©compte introuvable');
            }
            
            // V√©rifier que le changement est valide
            const statutSuivantAttendu = getProchainStatut(decompte.statut);
            
            // Autoriser le passage vers traitement manuel depuis traitement_ia
            const isPassageManuel = decompte.statut === 'traitement_ia' && nouveauStatut === 'traitement_manuel';
            
            if (nouveauStatut !== 'supprime' && 
                nouveauStatut !== statutSuivantAttendu && 
                !isPassageManuel) {
                throw new Error(`Passage de ${decompte.statut} √† ${nouveauStatut} non autoris√©`);
            }
            
            // Pr√©parer les mises √† jour
            const updates = {
                statut: nouveauStatut,
                historique: arrayUnion({
                    date: new Date(),
                    action: `statut_${nouveauStatut}`,
                    utilisateur: this.getUtilisateurActuel(),
                    details: `Statut chang√© en ${DECOMPTES_CONFIG.STATUTS[nouveauStatut].label}`,
                    timestamp: Date.now()
                })
            };
            
            // Mises √† jour sp√©cifiques selon le statut
            switch (nouveauStatut) {
                case 'traitement_ia':
                    updates['dates.transmissionIA'] = serverTimestamp();
                    break;
                    
                case 'traitement_effectue':
                    updates['dates.traitementEffectue'] = serverTimestamp();
                    updates['intervenants.traitePar'] = this.getUtilisateurActuel();
                    break;
                    
                case 'traitement_manuel':
                    updates['dates.traitementManuel'] = serverTimestamp();
                    updates['intervenants.traitePar'] = this.getUtilisateurActuel();
                    if (donnees.motif) {
                        updates.motifTraitementManuel = donnees.motif;
                    }
                    break;
                    
                case 'rapprochement_bancaire':
                    updates['dates.rapprochementBancaire'] = serverTimestamp();
                    updates['intervenants.rapprochePar'] = this.getUtilisateurActuel();
                    break;
                    
                case 'supprime':
                    updates.suppression = {
                        date: serverTimestamp(),
                        par: this.getUtilisateurActuel(),
                        motif: donnees.motif || 'Non sp√©cifi√©'
                    };
                    break;
            }
            
            // Effectuer la mise √† jour
            await updateDoc(doc(db, 'decomptes_mutuelles', decompteId), updates);
            
            console.log(`‚úÖ Statut chang√©: ${decompte.statut} ‚Üí ${nouveauStatut}`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur changement statut:', error);
            throw error;
        }
    }
    
    /**
     * Mettre √† jour un d√©compte
     * @param {string} decompteId - ID du d√©compte
     * @param {Object} updates - Mises √† jour √† appliquer
     * @returns {Promise<boolean>} Succ√®s
     */
    static async mettreAJourDecompte(decompteId, updates) {
        try {
            const { doc, updateDoc, arrayUnion } = 
                await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            // Ajouter √† l'historique
            const updatesAvecHistorique = {
                ...updates,
                historique: arrayUnion({
                    date: new Date(),
                    action: 'mise_a_jour',
                    utilisateur: this.getUtilisateurActuel(),
                    details: 'D√©compte mis √† jour',
                    timestamp: Date.now()
                })
            };
            
            await updateDoc(doc(db, 'decomptes_mutuelles', decompteId), updatesAvecHistorique);
            
            console.log('‚úÖ D√©compte mis √† jour');
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour d√©compte:', error);
            throw error;
        }
    }
    
    /**
     * Supprimer un d√©compte (soft delete)
     * @param {string} decompteId - ID du d√©compte
     * @param {Object} infos - Informations de suppression
     * @returns {Promise<void>}
     */
    static async supprimerDecompte(decompteId, infos = {}) {
        try {
            await this.changerStatut(decompteId, 'supprime', {
                motif: infos.motif || 'Suppression manuelle'
            });
            
            console.log('‚úÖ D√©compte supprim√© (soft delete):', decompteId);
            
        } catch (error) {
            console.error('‚ùå Erreur suppression d√©compte:', error);
            throw new Error('Impossible de supprimer le d√©compte : ' + error.message);
        }
    }
    
    // ========================================
    // M√âTHODES PRIV√âES
    // ========================================
    
    /**
     * R√©cup√©rer l'utilisateur actuel
     */
    static getUtilisateurActuel() {
        const auth = localStorage.getItem('sav_auth');
        if (auth) {
            const authData = JSON.parse(auth);
            return authData.collaborateur || { id: 'unknown', prenom: 'Inconnu', nom: '' };
        }
        return { id: 'unknown', prenom: 'Inconnu', nom: '' };
    }
    
    /**
     * R√©cup√©rer les magasins autoris√©s
     */
    static getMagasinsAutorises() {
        const auth = localStorage.getItem('sav_auth');
        if (auth) {
            const authData = JSON.parse(auth);
            return authData.magasins || [];
        }
        return [];
    }
}

/* ========================================
   HISTORIQUE DES DIFFICULT√âS
   
   [02/02/2025] - Cr√©ation initiale
   - Service basique CRUD
   - Gestion des statuts avec workflow
   - Statistiques par statut et mutuelle
   - Soft delete avec statut "supprime"
   
   NOTES POUR REPRISES FUTURES:
   - Ajouter la cr√©ation de d√©compte quand n√©cessaire
   - G√©rer les permissions par magasin
   - Ajouter l'export des donn√©es
   - Int√©grer avec l'API mutuelle si disponible
   ======================================== */