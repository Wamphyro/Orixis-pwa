// ========================================
// DECOMPTE-SECU.OPENAI.SERVICE.JS - ü§ñ EXTRACTION IA
// 
// R√îLE : Analyse des documents via GPT-4
// - Extraction des donn√©es sp√©cifiques s√©cu (OCR + IA)
// - Identification b√©n√©ficiaire, NSS, actes m√©dicaux
// - D√©tection des taux de remboursement et participations
// - Identification du contexte m√©dical (ALD, maternit√©...)
// ========================================

// ========================================
// DECOMPTE-SECU.OPENAI.SERVICE.JS - Service d'analyse IA des d√©comptes s√©cu
// Chemin: modules/decompte-secu/decompte-secu.openai.service.js
//
// DESCRIPTION:
// Service d'analyse des documents d√©comptes s√©curit√© sociale via OpenAI GPT-4.1-mini
// Adapt√© pour extraire les donn√©es sp√©cifiques CPAM
//
// FONCTIONS PUBLIQUES:
// - analyserDocument(documentUrl, documentType) : Analyser un document
// - analyserDocumentExistant(decompteId) : Analyser un d√©compte existant
// - extractDecompteSecuData(images) : Extraire les donn√©es via GPT-4
//
// D√âPENDANCES:
// - OpenAI API (GPT-4.1-mini avec vision)
// - Firebase Storage pour r√©cup√©rer les documents
// ========================================

// ========================================
// CONFIGURATION
// ========================================

// Configuration de la Cloud Function
const CLOUD_FUNCTION_URL = 'https://europe-west1-orixis-pwa.cloudfunctions.net/analyzeDocument';

// ========================================
// SERVICE PRINCIPAL
// ========================================

export class DecompteSecuOpenAIService {
    
    /**
     * Analyser un document d√©compte s√©cu complet
     * @param {string} documentUrl - URL du document dans Firebase Storage
     * @param {string} documentType - Type MIME du document
     * @param {Array} magasinsData - Donn√©es des magasins pour FINESS
     * @returns {Promise<Object>} Donn√©es extraites format√©es pour Firestore
     */
    static async analyserDocument(documentUrl, documentType, magasinsData = []) {
        try {
            console.log('ü§ñ D√©but analyse IA du d√©compte s√©curit√© sociale...');
            
            // Pr√©parer le tableau des magasins au format attendu par le prompt
            let magasinsArray = [];
            
            // Si magasinsData est un objet (format Firebase)
            if (!Array.isArray(magasinsData) && typeof magasinsData === 'object') {
                console.log('üîç Transformation des magasins Firebase vers format FINESS...');
                
                magasinsArray = Object.entries(magasinsData).map(([code, data]) => {
                    const finess = data.numeroFINESS || data.finess || data.FINESS || '';
                    const societe = data.societe?.raisonSociale || data.raisonSociale || data.societe || data.nom || '';
                    const rue = data.adresse?.rue || data.rue || '';
                    const codePostal = data.adresse?.codePostal || data.codePostal || '';
                    const ville = data.adresse?.ville || data.ville || '';
                    const adresse = `${rue} ${codePostal} ${ville}`.trim();
                    
                    return {
                        "FINESS": finess,
                        "CODE MAGASIN": code,
                        "SOCIETE": societe,
                        "ADRESSE": adresse,
                        "VILLE": ville
                    };
                });
            } 
            // Si c'est d√©j√† un tableau
            else if (Array.isArray(magasinsData)) {
                magasinsArray = magasinsData.map(data => ({
                    "FINESS": data.numeroFINESS || data.finess || data.FINESS || '',
                    "CODE MAGASIN": data.code || '',
                    "SOCIETE": data.societe?.raisonSociale || data.societe || data.nom || '',
                    "ADRESSE": `${data.adresse?.rue || ''} ${data.adresse?.codePostal || ''} ${data.adresse?.ville || ''}`.trim(),
                    "VILLE": data.adresse?.ville || data.ville || ''
                }));
            }
            
            console.log(`üìç ${magasinsArray.length} magasins pour recherche FINESS`);
            
            // Convertir le document en image(s) base64
            const images = await this.prepareDocumentImages(documentUrl, documentType);
            
            // Extraire les donn√©es via GPT-4
            console.log('üöÄ Appel extractDecompteSecuData avec', magasinsArray.length, 'magasins');
            const donneesExtraites = await DecompteSecuOpenAIService.extractDecompteSecuData(images, magasinsArray);
            
            // Formater pour notre structure Firestore
            const donneesFormatees = this.formaterPourFirestore(donneesExtraites);
            
            console.log('‚úÖ Analyse IA termin√©e avec succ√®s');
            return donneesFormatees;
            
        } catch (error) {
            console.error('‚ùå Erreur analyse IA:', error);
            throw new Error(`Erreur analyse IA: ${error.message}`);
        }
    }
    
    /**
     * Extraire les donn√©es via GPT-4 Vision
     * @param {Array<string>} images - Images en base64
     * @param {Array} magasinsArray - Tableau des magasins
     * @returns {Promise<Object>} Donn√©es brutes extraites
     */
    static async extractDecompteSecuData(images, magasinsArray = []) {
        try {
            console.log(`ü§ñ Appel Cloud Function pour ${images.length} image(s)...`);
            
            // Pr√©parer la cha√Æne JSON des magasins
            const magasinsJSON = JSON.stringify(magasinsArray, null, 2);
            console.log('üìã Magasins qui seront envoy√©s dans le prompt:', magasinsJSON);
            
            // PROMPT SP√âCIFIQUE S√âCURIT√â SOCIALE
            const prompt = `Tu es un expert en traitement des d√©comptes de remboursement de la S√©curit√© Sociale fran√ßaise (CPAM).
Tu analyses ${images.length} image(s) d'un document PDF et tu dois retourner UNIQUEMENT un objet JSON valide, sans aucun texte ni balise.

FORMAT JSON OBLIGATOIRE :
{
    "timestamp_analyse": "yyyy-MM-ddTHH:mm:ss",
    "societe": "string",
    "centre": "string",
    "periode": "yyyy-MM",
    "caisse_primaire": "string",
    "regime": "string",
    "beneficiaire": {
        "nom": "string",
        "prenom": "string",
        "numero_securite_sociale": "string",
        "numero_affiliation": "string"
    },
    "numero_feuille_soins": "string",
    "contexte_medical": {
        "ald": boolean,
        "maternite": boolean,
        "accident_travail": boolean,
        "invalidite": boolean
    },
    "actes_medicaux": [{
        "date_acte": "yyyy-MM-dd",
        "type_acte": "string",
        "code": "string",
        "libelle": "string",
        "professionnel": "string",
        "montant_facture": 0.0,
        "base_remboursement": 0.0,
        "taux_remboursement": 0,
        "montant_rembourse": 0.0,
        "participation_forfaitaire": 0.0,
        "franchise": 0.0
    }],
    "totaux": {
        "montant_total_facture": 0.0,
        "montant_total_base": 0.0,
        "montant_total_rembourse": 0.0,
        "montant_total_participations": 0.0,
        "montant_net_rembourse": 0.0
    },
    "paiement": {
        "date_paiement": "yyyy-MM-dd",
        "numero_paiement": "string",
        "mode_paiement": "string"
    }
}

EXTRACTION DU FINESS ET RECHERCHE SOCI√âT√â :
1. Chercher "N¬∞ AM", "Num√©ro AMC", "FINESS" ou "N¬∞ d'identification"
2. Extraire le nombre qui suit (exactement 9 chiffres)
3. Supprimer tous les z√©ros initiaux
4. Rechercher ce FINESS dans le tableau fourni
5. Si trouv√© : centre = "CODE MAGASIN", societe = "SOCIETE"
6. Si non trouv√©, chercher l'ADRESSE du professionnel et chercher une correspondance
7. Si trouv√© par adresse : centre = "CODE MAGASIN", societe = "SOCIETE"
8. Sinon : centre = "INCONNU", societe = ""

EXTRACTION DE LA CAISSE PRIMAIRE :
- Chercher "CPAM", "Caisse Primaire", "Caisse d'Assurance Maladie"
- Extraire le nom complet avec la ville (ex: "CPAM PARIS", "CPAM DES YVELINES")
- En MAJUSCULES

EXTRACTION DU R√âGIME :
- Chercher dans l'en-t√™te ou les mentions
- "R√©gime G√©n√©ral" ‚Üí regime = "general"
- "RSI" ou "R√©gime Social des Ind√©pendants" ‚Üí regime = "rsi"
- "MSA" ou "Mutualit√© Sociale Agricole" ‚Üí regime = "msa"
- R√©gimes sp√©ciaux (SNCF, RATP, etc.) ‚Üí regime = "special"
- Par d√©faut ‚Üí regime = "general"

EXTRACTION DU B√âN√âFICIAIRE :
- nom : Nom en MAJUSCULES
- prenom : Pr√©nom en MAJUSCULES  
- numero_securite_sociale : 13 ou 15 chiffres
  Chercher : "N¬∞ SS", "NSS", "N¬∞ S√©cu", "N¬∞ S√©curit√© Sociale", "N¬∞ Assur√©", "NIR"
  Format : 1 ou 2 + 12 ou 14 chiffres (ex: 1 85 05 78 006 048 22)
- numero_affiliation : si pr√©sent (peut √™tre vide)

EXTRACTION DU CONTEXTE M√âDICAL :
- ald : true si mention "ALD", "100%", "Affection Longue Dur√©e"
- maternite : true si mention "Maternit√©", "Grossesse"
- accident_travail : true si mention "AT", "Accident du travail", "MP", "Maladie professionnelle"
- invalidite : true si mention "Invalidit√©", "Pension d'invalidit√©"

EXTRACTION DES ACTES M√âDICAUX :
Pour chaque ligne d'acte m√©dical :
- date_acte : Date de l'acte ou des soins
- type_acte : D√©terminer le type
  * "consultation" pour consultations m√©dicales
  * "pharmacie" pour m√©dicaments
  * "analyses" pour examens biologiques
  * "radiologie" pour imagerie m√©dicale
  * "hospitalisation" pour s√©jours hospitaliers
  * "transport" pour transports m√©dicaux
  * "auxiliaires" pour soins infirmiers, kin√©, etc.
  * "optique" pour lunettes/lentilles
  * "dentaire" pour soins dentaires
- code : Code CCAM, code acte ou code m√©dicament
- libelle : Description de l'acte
- professionnel : Nom du professionnel de sant√©
- montant_facture : Montant factur√©/honoraires
- base_remboursement : Base de remboursement S√©cu (peut √™tre < montant_facture)
- taux_remboursement : Taux en % (70, 65, 30, 100, etc.)
- montant_rembourse : Montant rembours√© par la S√©cu
- participation_forfaitaire : 1‚Ç¨ pour consultations (0 si pas applicable)
- franchise : 0.50‚Ç¨ pour m√©dicaments/actes param√©dicaux, 2‚Ç¨ pour transports

CALCULS DES TOTAUX :
- montant_total_facture : Somme des montants factur√©s
- montant_total_base : Somme des bases de remboursement
- montant_total_rembourse : Somme des montants rembours√©s
- montant_total_participations : Somme des participations + franchises
- montant_net_rembourse : montant_total_rembourse - montant_total_participations

EXTRACTION DU PAIEMENT :
- date_paiement : Date du virement/paiement
- numero_paiement : R√©f√©rence du paiement
- mode_paiement : "Virement" par d√©faut

IDENTIFICATION DU NUM√âRO DE FEUILLE DE SOINS :
- Chercher "N¬∞ Feuille de soins", "Feuille n¬∞", "N¬∞ D√©compte"
- Format g√©n√©ralement num√©rique (10-15 chiffres)

IMPORTANT pour les documents multi-pages :
- Parcourir TOUTES les pages pour extraire TOUS les actes
- Ne pas dupliquer les informations
- Consolider les donn√©es de toutes les pages en un seul JSON

Tableau des magasins pour la recherche FINESS :
${magasinsJSON}

VALIDATION NSS :
- Le NSS doit avoir 13 chiffres (ou 15 avec la cl√©)
- Commence par 1 (homme) ou 2 (femme)
- Format : [1-2] AA MM DD DDD CCC [CC]
- Si le NSS trouv√© n'a pas le bon format, chercher ailleurs

RAPPELS CRITIQUES :
- CPAM = Caisse qui paie (exp√©diteur)
- SOCI√âT√â = Professionnel de sant√© qui re√ßoit
- Les taux standards : 70% (consultations), 65% (pharmacie service m√©dical rendu important), 30% (SMR mod√©r√©), 15% (SMR faible)
- ALD = remboursement √† 100%
- Participation forfaitaire de 1‚Ç¨ sur les consultations (sauf exceptions)
- Analyser TOUTES les pages fournies`;
            
            // LOG DU PROMPT POUR DEBUG
            console.log('ü§ñ ===== PROMPT ENVOY√â √Ä GPT =====');
            console.log(prompt);
            console.log('ü§ñ ===== FIN DU PROMPT =====');
            
            // Pr√©parer le body de la requ√™te
            const requestBody = {
                images: images,
                prompt: prompt,
                type: 'secu'
            };
            
            console.log('üì§ Requ√™te Cloud Function:', {
                url: CLOUD_FUNCTION_URL,
                bodySize: JSON.stringify(requestBody).length,
                promptLength: prompt.length,
                imagesCount: images.length
            });
            
            // Appeler la Cloud Function avec votre prompt
            const response = await fetch(CLOUD_FUNCTION_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Erreur Cloud Function');
            }
            
            const result = await response.json();
            
            console.log('‚úÖ R√©ponse Cloud Function:', result);
            
            // Retourner les donn√©es extraites
            return result.data || {};
            
        } catch (error) {
            console.error('‚ùå Erreur appel Cloud Function:', error);
            throw error;
        }
    }
    
    /**
     * Analyser un d√©compte d√©j√† existant
     * @param {string} decompteId - ID du d√©compte
     * @returns {Promise<Object>} Donn√©es mises √† jour
     */
    static async analyserDocumentExistant(decompteId) {
        try {
            // R√©cup√©rer le d√©compte
            const firestoreService = await import('./decompte-secu.firestore.service.js');
            const decompte = await firestoreService.getDecompteById(decompteId);
            
            if (!decompte) {
                throw new Error('D√©compte introuvable');
            }
            
            if (!decompte.documents || decompte.documents.length === 0) {
                throw new Error('Aucun document √† analyser');
            }
            
            // Charger les magasins directement depuis Firestore
            console.log('üè™ Chargement COMPLET des magasins depuis Firestore...');
            
            const { collection, getDocs, query, where } = await import(
                'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js'
            );
            const { db } = await import('../../src/services/firebase.service.js');
            
            // Cr√©er une requ√™te pour r√©cup√©rer TOUS les magasins actifs
            const magasinsRef = collection(db, 'magasins');
            const q = query(magasinsRef, where('actif', '==', true));
            
            // R√©cup√©rer TOUS les documents
            const magasinsSnapshot = await getDocs(q);
            const magasinsData = {};
            
            console.log(`üìä ${magasinsSnapshot.size} magasins trouv√©s dans Firestore`);
            
            magasinsSnapshot.forEach((doc) => {
                const data = doc.data();
                // Stocker par code pour faciliter l'acc√®s
                if (data.code) {
                    magasinsData[data.code] = {
                        ...data,
                        id: doc.id
                    };
                }
            });
            
            console.log('üè™ Magasins charg√©s:', Object.keys(magasinsData).length);
            
            // Stocker les magasins en localStorage pour la conversion FINESS ‚Üí Code
            localStorage.setItem('orixis_magasins', JSON.stringify(magasinsData));
            
            // Analyser le premier document
            const document = decompte.documents[0];
            const donneesExtraites = await this.analyserDocument(
                document.url,
                document.type,
                magasinsData
            );
            
            // Mettre √† jour le d√©compte
            await firestoreService.ajouterDonneesExtraites(decompteId, donneesExtraites);
            
            return {
                decompteId,
                donneesExtraites,
                documentAnalyse: document.nom
            };
            
        } catch (error) {
            console.error('‚ùå Erreur analyse d√©compte existant:', error);
            throw error;
        }
    }
    
    // ========================================
    // M√âTHODES UTILITAIRES
    // ========================================
    
    /**
     * Pr√©parer les images du document
     * @private
     */
    static async prepareDocumentImages(documentUrl, documentType) {
        console.log('üìÑ Type de document:', documentType);
        
        // HACK TEMPORAIRE : On envoie le PDF tel quel √† OpenAI
        if (documentType === 'application/pdf') {
            console.warn('‚ö†Ô∏è Envoi PDF direct √† OpenAI - fonctionnalit√© exp√©rimentale');
        }
        
        try {
            // On r√©cup√®re le fichier comme blob peu importe le type
            const response = await fetch(documentUrl);
            const blob = await response.blob();
            
            // Convertir en base64
            const base64 = await new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const base64 = reader.result.split(',')[1];
                    resolve(base64);
                };
                reader.onerror = reject;
                reader.readAsDataURL(blob);
            });
            
            console.log('‚úÖ Document converti en base64, taille:', base64.length);
            return [base64];
            
        } catch (error) {
            console.error('‚ùå Erreur conversion:', error);
            throw new Error('Impossible de lire le document');
        }
    }
    
    /**
     * Formater les donn√©es pour Firestore
     * @private
     */
    static formaterPourFirestore(donneesBrutes) {
        // Extraction du b√©n√©ficiaire
        const beneficiaire = donneesBrutes.beneficiaire || {};
        
        // D√©terminer le type d'acte principal
        let typeActePrincipal = null;
        const typesCount = {};
        donneesBrutes.actes_medicaux?.forEach(acte => {
            typesCount[acte.type_acte] = (typesCount[acte.type_acte] || 0) + 1;
        });
        
        if (Object.keys(typesCount).length > 0) {
            typeActePrincipal = Object.keys(typesCount).reduce((a, b) => 
                typesCount[a] > typesCount[b] ? a : b
            );
        }
        
        // Extraire les dates des soins
        const datesSoins = donneesBrutes.actes_medicaux
            ?.map(acte => this.parseDate(acte.date_acte))
            .filter(date => date !== null) || [];
        
        return {
            // B√©n√©ficiaire
            beneficiaire: {
                nom: beneficiaire.nom || null,
                prenom: beneficiaire.prenom || null,
                numeroSecuriteSociale: this.nettoyerNSS(beneficiaire.numero_securite_sociale),
                numeroAffiliation: beneficiaire.numero_affiliation || null
            },
            
            // Caisse et r√©gime
            caissePrimaire: donneesBrutes.caisse_primaire || null,
            regime: donneesBrutes.regime || 'general',
            
            // R√©f√©rences
            numeroFeuilleSoins: donneesBrutes.numero_feuille_soins || null,
            
            // Contexte m√©dical
            contexteMedical: donneesBrutes.contexte_medical || {
                ald: false,
                maternite: false,
                accidentTravail: false,
                invalidite: false
            },
            
            // Actes m√©dicaux
            actesMedicaux: this.formaterActesMedicaux(donneesBrutes.actes_medicaux || []),
            typeActePrincipal: typeActePrincipal,
            
            // Montants
            montantTotalFacture: donneesBrutes.totaux?.montant_total_facture || 0,
            montantTotalBase: donneesBrutes.totaux?.montant_total_base || 0,
            montantTotalRembourse: donneesBrutes.totaux?.montant_total_rembourse || 0,
            montantTotalParticipations: donneesBrutes.totaux?.montant_total_participations || 0,
            montantTotalRembourseFinal: donneesBrutes.totaux?.montant_net_rembourse || 0,
            
            // Calcul du taux moyen
            tauxMoyenRemboursement: donneesBrutes.totaux?.montant_total_facture > 0 
                ? Math.round((donneesBrutes.totaux.montant_net_rembourse / donneesBrutes.totaux.montant_total_facture) * 10000) / 100
                : 0,
            
            // Dates
            datesSoins: datesSoins,
            datePaiement: this.parseDate(donneesBrutes.paiement?.date_paiement),
            
            // Paiement
            paiementId: donneesBrutes.paiement?.numero_paiement || null,
            
            // Magasin - Convertir FINESS en code magasin
            codeMagasin: donneesBrutes.centre !== 'INCONNU' ? 
                this.findCodeMagasinByFiness(donneesBrutes.centre) : 
                null,
            
            // M√©tadonn√©es
            extractionIA: {
                timestamp: donneesBrutes.timestamp_analyse,
                modele: 'gpt-4.1-mini',
                societeDetectee: donneesBrutes.societe,
                periode: donneesBrutes.periode
            }
        };
    }
    
    /**
     * Formater les actes m√©dicaux
     * @private
     */
    static formaterActesMedicaux(actesBruts) {
        return actesBruts.map(acte => ({
            typeActe: acte.type_acte || 'autre',
            code: acte.code || null,
            libelle: acte.libelle || null,
            professionnel: acte.professionnel || null,
            dateActe: this.parseDate(acte.date_acte),
            montantFacture: acte.montant_facture || 0,
            baseRemboursement: acte.base_remboursement || acte.montant_facture || 0,
            tauxRemboursement: acte.taux_remboursement || 70,
            montantRembourse: acte.montant_rembourse || 0,
            participationForfaitaire: acte.participation_forfaitaire || 0,
            franchise: acte.franchise || 0
        }));
    }
    
    /**
     * Nettoyer un NSS
     * @private
     */
    static nettoyerNSS(nss) {
        if (!nss) return null;
        const cleaned = String(nss).replace(/\D/g, '');
        return (cleaned.length === 13 || cleaned.length === 15) ? cleaned : nss;
    }
    
    /**
     * Trouver le code magasin √† partir du FINESS
     * @private
     */
    static findCodeMagasinByFiness(finess) {
        // R√©cup√©rer les magasins depuis le localStorage
        const magasinsStored = localStorage.getItem('orixis_magasins');
        if (!magasinsStored) return finess;
        
        try {
            const magasins = JSON.parse(magasinsStored);
            // Chercher le magasin par FINESS
            for (const [code, data] of Object.entries(magasins)) {
                if (data.numeroFINESS === finess) {
                    console.log(`‚úÖ FINESS ${finess} ‚Üí Code magasin ${code}`);
                    return code;
                }
            }
        } catch (error) {
            console.error('‚ùå Erreur recherche code magasin:', error);
        }
        
        console.warn(`‚ö†Ô∏è Code magasin non trouv√© pour FINESS ${finess}`);
        return finess; // Retourner le FINESS si pas trouv√©
    }
    
    /**
     * Parser une date
     * @private
     */
    static parseDate(dateStr) {
        if (!dateStr) return null;
        const date = new Date(dateStr);
        return isNaN(date.getTime()) ? null : date;
    }
}

// ========================================
// EXPORT
// ========================================

export default {
    analyserDocument: DecompteSecuOpenAIService.analyserDocument.bind(DecompteSecuOpenAIService),
    analyserDocumentExistant: DecompteSecuOpenAIService.analyserDocumentExistant.bind(DecompteSecuOpenAIService),
    extractDecompteSecuData: DecompteSecuOpenAIService.extractDecompteSecuData.bind(DecompteSecuOpenAIService)
};

/* ========================================
   HISTORIQUE DES DIFFICULT√âS
   
   [03/02/2025] - Cr√©ation adapt√©e pour s√©curit√© sociale
   - Prompt sp√©cifique CPAM avec taux et participations
   - Extraction du contexte m√©dical (ALD, maternit√©...)
   - D√©tection des actes m√©dicaux et codes CCAM
   - Calcul des participations forfaitaires et franchises
   
   NOTES POUR REPRISES FUTURES:
   - Le prompt est optimis√© pour les d√©comptes CPAM FR
   - Gestion des taux standards (70%, 65%, 30%, 100%)
   - Participations : 1‚Ç¨ consultation, 0.50‚Ç¨ m√©dicaments
   - Contexte m√©dical important pour le taux (ALD = 100%)
   ======================================== */