// ========================================
// FACTURES-FOURNISSEURS.SERVICE.JS - üéØ SERVICE M√âTIER PRINCIPAL
// Chemin: modules/factures-fournisseurs/factures-fournisseurs.service.js
//
// DESCRIPTION:
// Service de gestion des factures fournisseurs
// Logique m√©tier et workflow des factures
// Int√®gre les constantes de l'ancien data.js
//
// STRUCTURE:
// 1. Configuration et constantes
// 2. M√©thodes de lecture
// 3. M√©thodes de changement de statut
// 4. M√©thodes de statistiques
// 5. Helpers et formatters
// ========================================

import { db } from '../../src/services/firebase.service.js';

// ========================================
// CONFIGURATION ET CONSTANTES (ancien data.js)
// ========================================

export const FACTURES_CONFIG = {
    // Configuration g√©n√©rale
    ITEMS_PAR_PAGE: 20,
    DELAI_RECHERCHE: 300,
    DELAI_PAIEMENT_DEFAUT: 30,
    
    // Comptes PCG avec libell√©s utilisateurs
    COMPTES_PCG: {
        // CLASSE 60 - Achats
        '6061': { libelle: '‚ö° √âlectricit√©, Gaz, Eau', classe: '60' },
        '6063': { libelle: 'üîß Petit √©quipement', classe: '60' },
        '6064': { libelle: 'üìé Fournitures bureau', classe: '60' },
        '6068': { libelle: 'üì¶ Autres fournitures', classe: '60' },
        
        // CLASSE 61 - Services ext√©rieurs
        '6132': { libelle: 'üè¢ Locations immobili√®res', classe: '61' },
        '6135': { libelle: 'üöó Locations mobili√®res', classe: '61' },
        '6155': { libelle: 'üî® Entretien/R√©parations', classe: '61' },
        '6156': { libelle: 'üõ†Ô∏è Maintenance', classe: '61' },
        '616':  { libelle: 'üõ°Ô∏è Assurances', classe: '61' },
        
        // CLASSE 62 - Autres services
        '6221': { libelle: '‚õΩ Carburants', classe: '62' },
        '6226': { libelle: '‚öñÔ∏è Honoraires', classe: '62' },
        '6228': { libelle: 'üéì Formation', classe: '62' },
        '6241': { libelle: 'üöö Transport/Livraison', classe: '62' },
        '6251': { libelle: '‚úàÔ∏è Voyages et d√©placements', classe: '62' },
        '6256': { libelle: 'üçΩÔ∏è Missions/R√©ceptions', classe: '62' },
        '6262': { libelle: 'üì± T√©l√©communications', classe: '62' },
        '6265': { libelle: 'üíø Logiciels/Abonnements', classe: '62' },
        '627':  { libelle: 'üè¶ Services bancaires', classe: '62' },
        
        // CLASSE 21 - Immobilisations
        '2183': { libelle: 'üíª Mat√©riel informatique (immo)', classe: '21' },
        '2184': { libelle: 'ü™ë Mobilier (immo)', classe: '21' }
    },
    
    // Statuts de facture
    STATUTS: {
        nouvelle: {
            label: 'Nouvelle',
            icon: 'üìÑ',
            couleur: '#e0e0e0',
            suivant: ['a_payer', 'deja_payee'],
            description: 'Facture upload√©e, en attente d\'analyse'
        },
        a_payer: {
            label: '√Ä payer',
            icon: 'üí≥',
            couleur: '#ff9800',
            suivant: ['payee', 'en_retard'],
            description: 'En attente de paiement'
        },
        deja_payee: {
            label: 'D√©j√† pay√©e',
            icon: '‚úÖ',
            couleur: '#4caf50',
            suivant: ['a_pointer'],
            description: 'Pay√©e avant r√©ception de la facture'
        },
        payee: {
            label: 'Pay√©e',
            icon: 'üí∞',
            couleur: '#2196f3',
            suivant: ['a_pointer'],
            description: 'Paiement effectu√©'
        },
        a_pointer: {
            label: '√Ä pointer',
            icon: 'üîç',
            couleur: '#9c27b0',
            suivant: ['pointee'],
            description: 'En attente de rapprochement bancaire'
        },
        pointee: {
            label: 'Point√©e',
            icon: '‚úì‚úì',
            couleur: '#00796b',
            suivant: null,
            description: 'Rapprochement bancaire effectu√©'
        },
        en_retard: {
            label: 'En retard',
            icon: '‚ö†Ô∏è',
            couleur: '#f44336',
            suivant: ['payee'],
            description: '√âch√©ance d√©pass√©e'
        },
        annulee: {
            label: 'Annul√©e',
            icon: 'üö´',
            couleur: '#9e9e9e',
            suivant: null,
            description: 'Facture annul√©e'
        }
    },
    
    // Cat√©gories de fournisseurs
    CATEGORIES_FOURNISSEURS: {
        telecom: {
            label: 'T√©l√©com',
            icon: 'üì±',
            description: 'Op√©rateurs t√©l√©phoniques et internet',
            exemples: ['Free', 'Orange', 'SFR', 'Bouygues']
        },
        energie: {
            label: '√ânergie',
            icon: '‚ö°',
            description: '√âlectricit√©, gaz, eau',
            exemples: ['EDF', 'Engie', 'Total √ânergies']
        },
        services: {
            label: 'Services',
            icon: 'üíº',
            description: 'Services professionnels',
            exemples: ['Comptable', 'Avocat', 'Assurance']
        },
        informatique: {
            label: 'Informatique',
            icon: 'üíª',
            description: 'Logiciels, cloud, mat√©riel',
            exemples: ['Microsoft', 'Adobe', 'OVH']
        },
        fournitures: {
            label: 'Fournitures',
            icon: 'üì¶',
            description: 'Fournitures de bureau et consommables',
            exemples: ['Bureau Vall√©e', 'Amazon Business']
        },
        autre: {
            label: 'Autre',
            icon: 'üìã',
            description: 'Autres types de fournisseurs',
            exemples: []
        }
    },
    
    // Modes de paiement
    MODES_PAIEMENT: {
        virement: { label: 'Virement', icon: 'üè¶' },
        prelevement: { label: 'Pr√©l√®vement', icon: 'üîÑ' },
        cheque: { label: 'Ch√®que', icon: 'üìÑ' },
        cb: { label: 'Carte bancaire', icon: 'üí≥' },
        especes: { label: 'Esp√®ces', icon: 'üíµ' }
    }
};

// ========================================
// CLASSE SERVICE
// ========================================

export class FacturesFournisseursService {
    
    /**
     * R√©cup√©rer les factures selon des crit√®res
     */
    static async getFactures(criteres = {}) {
        try {
            const { collection, getDocs, query, where, orderBy, limit } = 
                await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            let constraints = [];
            
            // Filtrer par statut
            if (criteres.statut) {
                constraints.push(where('statut', '==', criteres.statut));
            }
            
            // Filtrer par fournisseur
            if (criteres.fournisseur) {
                constraints.push(where('fournisseur.nom', '==', criteres.fournisseur));
            }
            
            // Filtrer par magasin
            if (criteres.magasin) {
                constraints.push(where('codeMagasin', '==', criteres.magasin));
            }
            
            // Filtrer par √† payer
            if (criteres.aPayer === true) {
                constraints.push(where('aPayer', '==', true));
            }
            
            // Filtrer par cat√©gorie
            if (criteres.categorie) {
                constraints.push(where('fournisseur.categorie', '==', criteres.categorie));
            }
            
            // Limite si sp√©cifi√©e
            if (criteres.limite) {
                constraints.push(limit(criteres.limite));
            }
            
            // Cr√©er la requ√™te
            const q = constraints.length > 0 
                ? query(collection(db, 'facturesFournisseurs'), ...constraints)
                : query(collection(db, 'facturesFournisseurs'));
                
            const snapshot = await getDocs(q);
            
            const factures = [];
            snapshot.forEach((doc) => {
                const data = doc.data();
                // Exclure manuellement les factures annul√©es si pas sp√©cifi√©
                if (!criteres.inclureAnnulees && data.statut === 'annulee') {
                    return;
                }
                factures.push({ id: doc.id, ...data });
            });
            
            // Tri manuel en JavaScript (date d√©croissante)
            factures.sort((a, b) => {
                const dateA = a.dateFacture?.toDate ? a.dateFacture.toDate() : new Date(a.dateFacture || 0);
                const dateB = b.dateFacture?.toDate ? b.dateFacture.toDate() : new Date(b.dateFacture || 0);
                return dateB - dateA;
            });
            
            // Post-traitement : v√©rifier les retards
            const facturesAvecRetard = factures.map(facture => {
                if (this.estEnRetard(facture.dateEcheance, facture.statut)) {
                    facture.enRetard = true;
                }
                return facture;
            });
            
            return facturesAvecRetard;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration factures:', error);
            return [];
        }
    }
    
    /**
     * R√©cup√©rer une facture par son ID
     */
    static async getFacture(factureId) {
        try {
            const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            const factureDoc = await getDoc(doc(db, 'facturesFournisseurs', factureId));
            
            if (factureDoc.exists()) {
                const facture = { id: factureDoc.id, ...factureDoc.data() };
                
                // V√©rifier si en retard
                if (this.estEnRetard(facture.dateEcheance, facture.statut)) {
                    facture.enRetard = true;
                }
                
                return facture;
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration facture:', error);
            return null;
        }
    }
    
    /**
     * Obtenir les statistiques des factures
     */
    static async getStatistiques() {
        try {
            const factures = await this.getFactures({ limite: 1000 });
            
            const stats = {
                total: factures.length,
                parStatut: {},
                parFournisseur: {},
                parCategorie: {},
                montantTotal: 0,
                montantAPayer: 0,
                montantPaye: 0,
                nombreEnRetard: 0
            };
            
            // Calculer les statistiques
            factures.forEach(facture => {
                // Par statut
                stats.parStatut[facture.statut] = (stats.parStatut[facture.statut] || 0) + 1;
                
                // Par fournisseur
                const nomFournisseur = facture.fournisseur?.nom || 'Non d√©fini';
                stats.parFournisseur[nomFournisseur] = (stats.parFournisseur[nomFournisseur] || 0) + 1;
                
                // Par cat√©gorie
                const categorie = facture.fournisseur?.categorie || 'autre';
                stats.parCategorie[categorie] = (stats.parCategorie[categorie] || 0) + 1;
                
                // Montants
                const montantTTC = facture.montantTTC || 0;
                stats.montantTotal += montantTTC;
                
                if (facture.statut === 'a_payer' || facture.statut === 'en_retard') {
                    stats.montantAPayer += montantTTC;
                } else if (facture.statut === 'payee' || facture.statut === 'deja_payee' || facture.statut === 'pointee') {
                    stats.montantPaye += montantTTC;
                }
                
                // En retard
                if (facture.enRetard || facture.statut === 'en_retard') {
                    stats.nombreEnRetard++;
                }
            });
            
            return stats;
            
        } catch (error) {
            console.error('‚ùå Erreur calcul statistiques:', error);
            return {
                total: 0,
                parStatut: {},
                parFournisseur: {},
                parCategorie: {},
                montantTotal: 0,
                montantAPayer: 0,
                montantPaye: 0,
                nombreEnRetard: 0
            };
        }
    }
    
    /**
     * Changer le statut d'une facture
     */
    static async changerStatut(factureId, nouveauStatut, donnees = {}) {
        try {
            const { doc, updateDoc, serverTimestamp, arrayUnion } = 
                await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
            
            // R√©cup√©rer la facture actuelle
            const facture = await this.getFacture(factureId);
            if (!facture) {
                throw new Error('Facture introuvable');
            }
            
            // V√©rifier que le changement est valide
            const statutsPossibles = this.getProchainStatut(facture.statut);
            
            if (!statutsPossibles.includes(nouveauStatut) && nouveauStatut !== 'annulee') {
                throw new Error(`Passage de ${facture.statut} √† ${nouveauStatut} non autoris√©`);
            }
            
            // Pr√©parer les mises √† jour
            const updates = {
                statut: nouveauStatut,
                statutPaiement: nouveauStatut,
                historique: arrayUnion({
                    date: new Date(),
                    action: `statut_${nouveauStatut}`,
                    utilisateur: this.getUtilisateurActuel(),
                    details: `Statut chang√© en ${FACTURES_CONFIG.STATUTS[nouveauStatut].label}`,
                    timestamp: Date.now()
                })
            };
            
            // Mises √† jour sp√©cifiques selon le statut
            switch (nouveauStatut) {
                case 'payee':
                    updates['dates.paiement'] = serverTimestamp();
                    updates.datePaiement = serverTimestamp();
                    updates['intervenants.payePar'] = this.getUtilisateurActuel();
                    updates.aPayer = false;
                    if (donnees.modePaiement) {
                        updates.modePaiement = donnees.modePaiement;
                    }
                    if (donnees.referenceVirement) {
                        updates.referenceVirement = donnees.referenceVirement;
                    }
                    break;
                    
                case 'a_pointer':
                    updates.aPayer = false;
                    break;
                    
                case 'pointee':
                    updates['dates.pointage'] = serverTimestamp();
                    updates['intervenants.pointePar'] = this.getUtilisateurActuel();
                    break;
                    
                case 'en_retard':
                    updates.aPayer = true;
                    break;
                    
                case 'annulee':
                    updates.aPayer = false;
                    updates.suppression = {
                        date: serverTimestamp(),
                        par: this.getUtilisateurActuel(),
                        motif: donnees.motif || 'Non sp√©cifi√©'
                    };
                    break;
            }
            
            // Effectuer la mise √† jour
            await updateDoc(doc(db, 'facturesFournisseurs', factureId), updates);
            
            console.log(`‚úÖ Statut chang√©: ${facture.statut} ‚Üí ${nouveauStatut}`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur changement statut:', error);
            throw error;
        }
    }
    
    /**
     * Supprimer une facture (soft delete)
     */
    static async supprimerFacture(factureId, infos = {}) {
        try {
            await this.changerStatut(factureId, 'annulee', {
                motif: infos.motif || 'Suppression manuelle'
            });
            
            console.log('‚úÖ Facture annul√©e (soft delete):', factureId);
            
        } catch (error) {
            console.error('‚ùå Erreur suppression facture:', error);
            throw new Error('Impossible de supprimer la facture : ' + error.message);
        }
    }
    
    // ========================================
    // HELPERS (ancien data.js)
    // ========================================
    
    /**
     * G√©n√©rer un num√©ro interne
     */
    static genererNumeroInterne() {
        const date = new Date();
        const annee = date.getFullYear();
        const mois = String(date.getMonth() + 1).padStart(2, '0');
        const jour = String(date.getDate()).padStart(2, '0');
        const sequence = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
        
        return `FF-${annee}${mois}${jour}-${sequence}`;
    }
    
    /**
     * G√©n√©rer une r√©f√©rence de virement
     */
    static genererReferenceVirement(date = new Date()) {
        const annee = date.getFullYear();
        const mois = String(date.getMonth() + 1).padStart(2, '0');
        const numero = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        
        return `VIR-FF-${annee}-${mois}-${numero}`;
    }
    
    /**
     * Calculer la date d'√©ch√©ance
     */
    static calculerDateEcheance(dateFacture, delaiPaiement = FACTURES_CONFIG.DELAI_PAIEMENT_DEFAUT) {
        const date = new Date(dateFacture);
        date.setDate(date.getDate() + delaiPaiement);
        return date;
    }
    
    /**
     * Calculer le montant HT depuis TTC
     */
    static calculerMontantHT(montantTTC, tauxTVA = 20) {
        return montantTTC / (1 + tauxTVA / 100);
    }
    
    /**
     * Calculer la TVA
     */
    static calculerMontantTVA(montantHT, tauxTVA = 20) {
        return montantHT * (tauxTVA / 100);
    }
    
    /**
     * D√©terminer la cat√©gorie d'un fournisseur
     */
    static determinerCategorieFournisseur(nomFournisseur) {
        const nom = nomFournisseur.toUpperCase();
        
        // T√©l√©com
        if (nom.includes('FREE') || nom.includes('ORANGE') || nom.includes('SFR') || nom.includes('BOUYGUES')) {
            return 'telecom';
        }
        
        // √ânergie
        if (nom.includes('EDF') || nom.includes('ENGIE') || nom.includes('TOTAL')) {
            return 'energie';
        }
        
        // Informatique
        if (nom.includes('MICROSOFT') || nom.includes('ADOBE') || nom.includes('OVH') || nom.includes('GOOGLE')) {
            return 'informatique';
        }
        
        // Par d√©faut
        return 'autre';
    }
    
    /**
     * Obtenir le prochain statut possible
     */
    static getProchainStatut(statutActuel) {
        return FACTURES_CONFIG.STATUTS[statutActuel]?.suivant || [];
    }
    
    /**
     * V√©rifier si une facture est en retard
     */
    static estEnRetard(dateEcheance, statut) {
        if (!dateEcheance || statut !== 'a_payer') return false;
        
        const echeance = dateEcheance.toDate ? dateEcheance.toDate() : new Date(dateEcheance);
        return echeance < new Date();
    }
    
    /**
     * R√©cup√©rer l'utilisateur actuel
     */
    static getUtilisateurActuel() {
        const auth = localStorage.getItem('sav_auth');
        if (auth) {
            const authData = JSON.parse(auth);
            return authData.collaborateur || { id: 'unknown', prenom: 'Inconnu', nom: '' };
        }
        return { id: 'unknown', prenom: 'Inconnu', nom: '' };
    }
}

// Export par d√©faut
export default FacturesFournisseursService;